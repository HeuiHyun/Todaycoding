# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import seaborn as sns
import matplotlib.pyplot as plt

from IPython.display import set_matplotlib_formats
set_matplotlib_formats("retina")

plt.style.use("seaborn-whitegrid")

raw = pd.read_csv(r"../input/kaggle-survey-2020/kaggle_survey_2020_responses.csv", low_memory=False)
raw.shape

raw.head()

question = raw.iloc[0] # 인덱스 값이 문자나 다른 값이어도 첫번째 행을 가져온다.
question

answer = raw.drop([0]) # 나머지 내용을 나타내준다 axis 0은 행 axis 1은 열
answer

answer.info()

Q1 What is your age (# years)?

question["Q1"]

answer["Q1"].value_counts(normalize = True) # 빈도수 확인 가능(value_counts()) normalize = True 비율을 알수있음

answer["Q1"].value_counts().sort_index() # 인덱스 순으로 나열
answer["Q1"].value_counts().sort_index().plot() # 그래프도 가능

# sns.countplot(data=answer,x="Q1") # 정렬이 안되있음.
sns.countplot(data=answer.sort_values("Q1"),x="Q1")# 큰 순으로 정렬한 모양
sns.countplot(data=answer.sort_values("Q1"),x="Q1") .set_title(question["Q1"]) # 제목 생성

Q1 = answer['Q1'].value_counts().sort_index()
sns.countplot(data=answer.sort_values("Q1"), x="Q1", 
              palette="Blues_r").set_title(question["Q1"]) # 팔레트 코드로 색깔을 진한순부터 옅은순으로 생성(Blues_r)

Q2 What is your gender? - Selected Choice
question_no = "Q2"
Q2 = answer[question_no].value_counts()
Q2

sns.countplot(data=answer, 
              y=question_no).set_title(question[question_no])

# answer["Q1"].value_counts() # value_counts 시리즈에서만 빈도수 셈 
q1q2 = pd.crosstab(answer["Q1"],answer["Q2"]) # pandas의 crosstab을 이용하면 양쪽의 빈도수 확인 가능
q1q2[["Man","Woman"]].sort_index(ascending=False).plot.barh() 
# []하나일때는 시리즈형태로 [[]] 일때는 데이터프레임형태로 보여준다.
# .plot = 직선 .bar 막대형태 rot=o 글자가 눕지 않음 barh y축으로 막대그래프
# sort_index 에서 (ascending=False) 하면 오름차순 내림차순 차이
# sort_values 컬럼값 기준으로 정렬
# 또는 seaborn 거로도 사용가능
plt.figure(figsize=(10,6))
sns.countplot(data=answer.sort_values("Q1"),x="Q1",hue="Q2").set_title("Age & Gender") # hue Q2로 다르게표시

q1q2 = pd.crosstab(answer["Q1"], answer["Q2"])
q1q2[["Man", "Woman"]].plot.bar(rot=0)

q1q2[["Man", "Woman"]].sort_index(ascending=False).plot.barh(figsize=(10, 6), title="Age & Gender")

plt.figure(figsize=(10, 6))
sns.countplot(data=answer.sort_values("Q1"), x="Q1", hue="Q2").set_title("Age & Gender")

Q3 In which country do you currently reside?

# answer["Q1"].value_counts().index # 빈도수가 많은 순서대로 index만 뽑음
q1_cols=answer["Q1"].value_counts().sort_index().index.tolist()# 인덱스값순으로 정렬해서 인덱스만 뽑고 리스트형식으로 바꿔줌
q1_cols

def show_countplot_by_qno(qno,fsize=(10,6),order=None): # 함수 정의 fsize = 그래프 크기 order 값이 없으면 빈도수 높은순으로 정렬
    if not order:
        order= answer[qno].value_counts().index # 빈도수가 높은 순으로 정렬
    
    plt.figure(figsize=fsize) # 그래프 사이즈 정의 mapplot
    sns.countplot(data=answer, y=qno,
                  order=order , palette="Blues_r",
                 ).set_title(question[qno]) # 제목 추가set_title()
    
show_countplot_by_qno("Q6") # fsize 변경 가능! q1~q6까지 가능

# 오늘의 코딩 위와 같은함수
def show_countplot_by_qno(qno, fsize=(10, 6), order=None):
    """
    qno : question_no, ex) Q12
    fsize : figsize default (10, 6)
    order : optional order list, default value_counts().index
    """
    if not order :
        order = answer[qno].value_counts().index
        
    plt.figure(figsize=fsize)
    sns.countplot(data=answer, 
                  y=qno,
                  order=order,
                  palette="Blues_r"
                 ).set_title(question[qno])
show_countplot_by_qno? # ?하면 함수의 내용을 알 수 있음.
show_countplot_by_qno("Q3", fsize=(12, 12))

Q4 🎓 What is the highest level of formal education that you have attained or plan to attain within the next 2 years?

show_countplot_by_qno("Q4")

Q5 Select the title most similar to your current role (or most recent title if retired):

show_countplot_by_qno("Q5")

Q6 For how many years have you been writing code and/or programming?

show_countplot_by_qno("Q6")
q6_cols = ['I have never written code', '< 1 years', '1-2 years', '3-5 years', '5-10 years',  
       '10-20 years', '20+ years']
show_countplot_by_qno("Q6", order=q6_cols)

Q7 What programming languages do you use on a regular basis? (Select all that apply)
🐼 pandas filter & describe 🗂 # main point Q7부터는 다중으로 대답이 있기때문에 다르게 분석

question.filter(regex="Q7")[0].split("-")[0] # 필터를 사용하고 regex를 이용 Q7의 내용을 확인하고 [0]은 그중 첫번째 split을 통하여 잘라준뒤 첫 번째 값 호출
question.filter(regex="Q7")[0].split("-")[0]
answer_Q7 = answer.filter(regex="Q7") # pandas의 filter를 이용 regex는 regularexpresion의 약자로 정규표현식 사용
answer_Q7
answer_Q7.notnull() # 결측치는 False 아닌값은 True
answer_Q7_desc = answer_Q7.describe() # describe 기술통계를 알려줌 결측치를 제외
answer_Q7_desc.loc[["top","count"]].T.set_index("top").plot.bar() 
# top,count를 리스트 형태로 loc로 인덱싱하고 .T(trans)로 행과열 교체 후 index top을 부른 후 그래프한 것 
# .T를 해준 이유는 index top을 부르면 열의 위치가 아니고 오류가 나기 때문에 바꿔준다.
answer_Q7_desc = answer_Q7.describe()
answer_Q7_desc
answer_Q7_count = answer_Q7_desc.loc[["top", "count"]].T
answer_Q7_count = answer_Q7_count.set_index("top")
answer_Q7_count = answer_Q7_count.sort_values("count", ascending=False)
answer_Q7_count
q7_title=question.filter(regex="Q7")[0].split("-")[0] # 제목 가져오기
sns.barplot(data=answer_Q7_count, y=answer_Q7_count.index,x="count",palette="Reds_r").set_title(q7_title)

How to get title in multiple choice question
q7_title = question.filter(regex="Q7")[0].split("-")[0]
sns.barplot(data=answer_Q7_count, 
            y=answer_Q7_count.index, x="count", palette="Blues_r").set_title(q7_title)

define get_question_title function
# def get_question_title_by_qno(qno): # Q7부터 오류처리가 나므로 오류구문 사용해도되고
#     try:
#         return question[qno]
#     except:
#         return qno

# get_question_title_by_qno("Q7") 
# 밑에 처럼 조건문도 가능
def get_question_title_by_qno(qno): # 
    if qno in question.index:
        return question[qno]
    else:
        q_no=question.filter(regex=qno)[0].split("-")[0]
        return q_no
    
get_question_title_by_qno("Q7") 

🗂 define get_multiple_choice_answer
# def get_multiple_choice_answer_by_qno(qno):
#     df_answer = answer.filter(regex=qno)
#     answer_desc = df_answer.describe()
#     answer_count = answer_desc.loc[["top","count"]].T.set_index("top") # 행 인데스로 loc사용하고 top값을 변수로 정의(set.index)
#     answer_count = answer_count.sort_values(by="count",ascending=False) # 빈도수가 높은 값순으로 반환(ascending=False)
#     return answer_count

# get_multiple_choice_answer_by_qno("Q7")

📊 define show_multiple_choice_bar_plot_by_qno function

# def show_multiple_choice_bar_plot_by_qno(qno):
#     multiple_choice_answer = get_multiple_choice_answer_by_qno(qno)
    
#     plt.figure(figsize=(10,6)) # 그림 크기
#     sns.barplot(data=multiple_choice_answer,
#                 y=multiple_choice_answer.index,
#                 x="count", 
#                 palette="Blues_r").set_title(get_question_title_by_qno(qno))
    

# show_multiple_choice_bar_plot_by_qno("Q7")

Q8 What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice
question.index

def show_plot_by_qno(qno): # 여태 만들었던 함수들을 조건문으로 하여서 단일,다중변수둘다 상관없이 그래프를 그리는 함수를 작성 
    if qno in question.index:
        show_countplot_by_qno(qno)
    else:
        show_multiple_choice_bar_plot_by_qno(qno)

show_plot_by_qno("Q8")  

Q9 Which of the following integrated development environments (IDE's) do you use on a regular basis? (Select all that apply)
show_plot_by_qno("Q9")

arrow_upward

arrow_downward

delete

unfold_less

more_vert
Q10 Which of the following hosted notebook products do you use on a regular basis? (Select all that apply)
show_plot_by_qno("Q10")

Q11 What type of computing platform do you use most often for your data science projects? - Selected Choice
show_plot_by_qno("Q11")

Q12 Which types of specialized hardware do you use on a regular basis?
show_plot_by_qno("Q12")

Q13 🧮 Approximately how many times have you used a TPU (tensor processing unit)?
show_plot_by_qno("Q13")

Q14 🎨 What data visualization libraries or tools do you use on a regular basis? (Select all that apply)
show_plot_by_qno("Q14")

Q15 For how many years have you used machine learning methods?
show_plot_by_qno("Q15")

Q16 Which of the following machine learning frameworks do you use on a regular basis? (Select all that apply)
show_plot_by_qno("Q16")

arrow_upward

arrow_downward

delete

unfold_less

more_vert
Q17 Which of the following ML algorithms do you use on a regular basis? (Select all that apply):
show_plot_by_qno("Q17")

Q18 Which categories of computer vision methods do you use on a regular basis? (Select all that apply)
show_plot_by_qno("Q18")

Q19 📚 Which of the following natural language processing (NLP) methods do you use on a regular basis? (Select all that apply)
show_plot_by_qno("Q19")

Q20 🏢 What is the size of the company where you are employed?
show_plot_by_qno("Q20")

Q21 Approximately how many individuals are responsible for data science workloads at your place of business?
show_plot_by_qno("Q21")

Q22 Does your current employer incorporate machine learning methods into their business?
show_plot_by_qno("Q22")

Q23 Select any activities that make up an important part of your role at work: (Select all that apply)
show_plot_by_qno("Q23")

Q24 What is your current yearly compensation (approximate $USD)
show_plot_by_qno("Q24")

q24_count = answer["Q24"].value_counts().reset_index()
q24_count.columns = ["range", "count"]
q24_count.sort_values("range") 
# 원하는 내림차순으로 정렬이 안됨 why? range안에 값이 문자여서

q24_count["min"]=q24_count["range"].str.split("-",expand=True)[0]
q24_count["max"]=q24_count["range"].str.split("-",expand=True)[1]
q24_count["min"] = q24_count["min"].str.replace(",|\$|>","").astype(int)
q24_count=q24_count.sort_values("min")
# str에서 -를 통해서 split 해준다
# expand=True 0,1번째 리스트인 데이터프레임형태로 구분해줌.
# q24_count["min"]에서 ,를 ""(빈칸)으로 바꿔주고 
# |의 의미는 또는 \$ 달러표시 삭제(그냥 $ 는 정규표현식에서 끝이라는 뜻이기 때문에)
# 완료되면 특수문자들이 다 사라짐.
plt.figure(figsize=(10,6))
sns.barplot(data=q24_count,y="range",x="count")

q24_cols = q24_count.range.tolist()
q3_usa = answer[answer["Q3"].isin(["United States of America"])] # 나라를 바꾸면 해당나라만 가능
plt.figure(figsize=(10,6))
sns.countplot(data=q3_usa, y="Q24", order=q24_cols)
# 미국에서 응답한 값만 추출
# order q24_cols 임금순으로 설정














